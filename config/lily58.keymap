/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define COMPAT 1
#define CONTROL 2
#define NUMPAD 3
#define MEDIA 4
#define CLOSER 5
#define COMBO 6

&sk { quick-release; };

/ {
    behaviors {
        atcaret: at_caret {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp AT>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hashgrave: hash_grave {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp HASH>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        excl8: excl_8 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp EXCL>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbkt6: rbkt_6 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RBKT>, <&kp N6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus4: plus_4 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp PLUS>, <&kp N4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar2: rpar_2 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RPAR>, <&kp N2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        star0: star_0 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp STAR>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equal9: equal_9 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp EQUAL>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpar1: lpar_1 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LPAR>, <&kp N1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbrc3: rbrc_3 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RBRC>, <&kp N3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbrc5: lbrc_5 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LBRC>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lbkt7: lbkt_7 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LBKT>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ampsprcnt: amps_prcnt {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp AMPS>, <&kp PRCNT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dllrtidle: dllr_tidle {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp DLLR>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        fn {
            bindings = <&combo_fn>;
            key-positions = <18 33>;
            layers = <6>;
        };

        ds {
            bindings = <&combo_ds>;
            key-positions = <30 34>;
            layers = <6>;
        };

        dn {
            bindings = <&combo_dn>;
            key-positions = <30 33>;
            layers = <6>;
        };

        at {
            bindings = <&combo_at>;
            key-positions = <25 32>;
            layers = <6>;
        };

        fr {
            bindings = <&combo_fr>;
            key-positions = <18 21>;
            layers = <6>;
        };

        im {
            bindings = <&combo_im>;
            key-positions = <29 45>;
            layers = <6>;
        };

        cl {
            bindings = <&combo_cl>;
            key-positions = <20 22>;
            layers = <6>;
        };

        dt {
            bindings = <&combo_dt>;
            key-positions = <30 32>;
            layers = <6>;
        };

        dk {
            bindings = <&combo_dk>;
            key-positions = <30 40>;
            layers = <6>;
        };

        dc {
            bindings = <&combo_dc>;
            key-positions = <30 20>;
            layers = <6>;
        };

        dh {
            bindings = <&combo_dh>;
            key-positions = <30 31>;
            layers = <6>;
        };

        gc {
            bindings = <&combo_gc>;
            key-positions = <19 20>;
            layers = <6>;
        };

        gs {
            bindings = <&combo_gs>;
            key-positions = <19 34>;
            layers = <6>;
        };

        gp {
            bindings = <&combo_gp>;
            key-positions = <19 16>;
            layers = <6>;
        };

        gl {
            bindings = <&combo_gl>;
            key-positions = <19 22>;
            layers = <6>;
        };
    };

    macros {
        combo_fn: combo_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp F &kp L &kp I &kp SPACE &kp N5 &kp N8 &kp SPACE &kp N3 &kp N4 &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>;
            label = "COMBO_FN";
        };

        combo_ds: combo_ds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON &kp D &kp K>;
            label = "COMBO_DS";
        };

        combo_dn: combo_dn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp G &kp SEMI &kp K>;
            label = "COMBO_DN";
        };

        combo_at: combo_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp SEMI &kp SEMI &kp D &kp O &kp K>;
            label = "COMBO_AT";
        };

        combo_fr: combo_fr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp O &kp S &kp M>;
            label = "COMBO_FR";
        };

        combo_im: combo_im {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp M &kp R &kp S &kp O &kp K>;
            label = "COMBO_IM";
        };

        combo_cl: combo_cl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp P &kp A &kp SEMI &kp SEMI>;
            label = "COMBO_CL";
        };

        combo_dt: combo_dt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp A &kp K &kp A>;
            label = "COMBO_DT";
        };

        combo_dk: combo_dk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp S &kp I &kp V &kp D &kp O>;
            label = "COMBO_DK";
        };

        combo_dc: combo_dc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp S &kp I &kp V &kp D &kp O &kp SPACE &kp I &kp S &kp M &kp R &kp S &kp SEMI &kp D>;
            label = "COMBO_DC";
        };

        combo_dh: combo_dh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp G &kp I &kp K>;
            label = "COMBO_DH";
        };

        combo_gc: combo_gc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp G &kp K &kp SPACE &kp I &kp S &kp M &kp M &kp G &kp K>;
            label = "COMBO_GC";
        };

        combo_gs: combo_gs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp G &kp K &kp SPACE &kp SEMI &kp K &kp A &kp K &kp F &kp SEMI>;
            label = "COMBO_GS";
        };

        combo_gp: combo_gp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp G &kp K &kp SPACE &kp R &kp F &kp P &kp P>;
            label = "COMBO_GP";
        };

        combo_gl: combo_gl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp G &kp K &kp SPACE &kp SEMI &kp K &kp A &kp SEMI &kp J>;
            label = "COMBO_GL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  1    |  2  |  3  |  4   |  5   |  6   |                   |  7   |  8    |  9    |  0   |   -   |   =   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   [   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // |  ESC  |  Z  |  X  |  C   |  V   |  B   |    `   |  |   \   |  N   |  M    |  ,    |  .   |   /   |   ]   |
            //                     | GUI  | ALT  | SHFT |  SPACE |  |ENTER/C| SHFT | BSPC  | CTRL  |

            bindings = <
&kp N1     &kp N2  &kp N3  &kp N4    &kp N5    &kp N6                                   &kp N7     &kp N8    &kp N9     &kp N0   &kp MINUS  &kp EQUAL
&kp TAB    &kp Q   &kp W   &kp E     &kp R     &kp T                                    &kp Y      &kp U     &kp I      &kp O    &kp P      &kp LBKT
&kp LCTRL  &kp A   &kp S   &kp D     &kp F     &kp G                                    &kp H      &kp J     &kp K      &kp L    &kp SEMI   &kp SQT
&kp ESC    &kp Z   &kp X   &kp C     &kp V     &kp B      &kp GRAVE    &kp BSLH         &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH   &kp RBKT
                           &kp LGUI  &kp LALT  &kp LSHFT  &kp SPACE    &lt CONTROL RET  &kp RSHFT  &kp BSPC  &kp RCTRL
            >;
        };

        compat_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  &    |  [  |  {  |  }   |  (   |  =   |                   |  *   |  )    |  +    |  ]   |   !   |   #   |
            // |  TAB  |  ;  |  ,  |  .   |  P   |  Y   |                   |  F   |  G    |  C    |  R   |   L   |   /   |
            // |  CTRL |  A  |  O  |  E   |  U   |  I   |                   |  D   |  H    |  T    |  N   |   S   |   -   |
            // |  ESC  |  '  |  Q  |  J   |  K   |  X   |    ~   |  |   |   |  B   |  M    |  W    |  V   |   Z   |   @   |
            //                     | GUI  | ALT  | SHFT |  SPACE |  |ENTER/C| SHFT | BSPC  | CTRL  |

            bindings = <
&ampsprcnt  &lbkt7    &lbrc5     &rbrc3   &lpar1  &equal9                          &star0  &rpar2  &plus4  &rbkt6  &excl8  &hashgrave
&trans      &kp SEMI  &kp COMMA  &kp DOT  &kp P   &kp Y                            &kp F   &kp G   &kp C   &kp R   &kp L   &kp FSLH
&trans      &kp A     &kp O      &kp E    &kp U   &kp I                            &kp D   &kp H   &kp T   &kp N   &kp S   &kp MINUS
&trans      &kp SQT   &kp Q      &kp J    &kp K   &kp X    &dllrtidle    &kp BSLH  &kp B   &kp M   &kp W   &kp V   &kp Z   &atcaret
                                 &trans   &trans  &trans   &trans        &trans    &trans  &trans  &trans
            >;
        };

        control_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |  BT1  | BT2 | BT3 | BT4  | BT5  |BTCLR |                   |PSCRN |       | CAPS  |      |  ->   |       |
            // |       |CHOME|VOICE| END  | HOME | INS  |                   | BSPC |  <-   |  ESC  | NLAY | PGDN  |       |
            // | OTOG  |LOCK |     |  v   |  ^   |      |        |  |       | MLAY | PGUP  | BACK  | FRWD |       |COMPAT |
            //                     |      |      |      | CLOSER |  |       |      |  DEL  |       |

            bindings = <
&kp F1        &kp F2         &kp F3               &kp F4        &kp F5        &kp F6                                  &kp F7      &kp F8     &kp F9      &kp F10        &kp F11    &kp F12
&bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2         &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR                              &kp PSCRN   &none      &kp CAPS    &none          &kp RIGHT  &tog COMBO
&trans        &kp C_AC_HOME  &kp C_VOICE_COMMAND  &kp END       &kp HOME      &kp INS                                 &kp BSPC    &kp LEFT   &kp ESC     &tog NUMPAD    &kp PG_DN  &none
&out OUT_TOG  &kp C_AL_LOCK  &none                &kp DOWN      &kp UP        &none       &none               &none   &tog MEDIA  &kp PG_UP  &kp K_BACK  &kp K_FORWARD  &none      &tog COMPAT
                                                  &trans        &trans        &trans      &lt CLOSER SPACE    &trans  &trans      &kp DEL    &trans
            >;
        };

        numpad_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |   7   |  8  |  9  |  *   |  /   | NLCK |                   |      |       |       |      |       |       |
            // |   4   |  5  |  6  |  +   |  -   | CLR  |                   |      |       |   ^   |      |       |       |
            // |   1   |  2  |  3  |  =   |  ,   |      |                   |      |  <-   |   v   |  ->  |       |       |
            // |   0   |  .  | ENT |      |      |      |        |  |       |      |       |       |      |       |       |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp KP_N7  &kp KP_N8   &kp KP_N9     &kp KP_MULTIPLY  &kp KP_DIVIDE  &kp KP_NLCK                               &none   &none     &none     &none      &none  &none
&kp KP_N4  &kp KP_N5   &kp KP_N6     &kp KP_PLUS      &kp KP_MINUS   &kp KP_CLEAR                              &none   &none     &kp UP    &none      &none  &none
&kp KP_N1  &kp KP_N2   &kp KP_N3     &kp KP_EQUAL     &kp KP_COMMA   &none                                     &none   &kp LEFT  &kp DOWN  &kp RIGHT  &none  &none
&kp KP_N0  &kp KP_DOT  &kp KP_ENTER  &none            &none          &none         &tog NUMPAD    &tog NUMPAD  &none   &none     &none     &none      &none  &none
                                     &trans           &trans         &trans        &tog NUMPAD    &tog NUMPAD  &trans  &trans    &trans
            >;
        };

        media_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   | BINC |       |       |      |       |       |
            // |       |     |     |      |      |      |                   | BDEC | VOLDN | VMUTE |VOLUP |       |       |
            // |       |     |     |      |      |      |                   |      | PREV  |  P\P  | NEXT |       |       |
            // |       |     |     |      |      |      |        |  |       |      |       | MUSIC |MOVIE |       |       |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none  &none  &none  &none   &none   &none                             &kp C_BRI_INC  &none         &none           &none            &none  &none
&none  &none  &none  &none   &none   &none                             &kp C_BRI_DEC  &kp C_VOL_DN  &kp C_MUTE      &kp C_VOL_UP     &none  &none
&none  &none  &none  &none   &none   &none                             &none          &kp C_PREV    &kp C_PP        &kp C_NEXT       &none  &none
&none  &none  &none  &none   &none   &none   &tog MEDIA    &tog MEDIA  &none          &none         &kp C_AL_AUDIO  &kp C_AL_MOVIES  &none  &none
                     &trans  &trans  &trans  &tog MEDIA    &tog MEDIA  &trans         &trans        &trans
            >;
        };

        closer_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |  1    |  2  |  3  |  4   |  5   |  6   |                   |  7   |  8    |  9    |  0   |   -   |   =   |
            // |       |     |     |      |      |      |        |  |       |      |       |       |      |       |       |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none   &none   &none   &none   &none   &none                   &none   &none   &none   &none   &none      &none
&none   &none   &none   &none   &none   &none                   &none   &none   &none   &none   &none      &none
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6                  &kp N7  &kp N8  &kp N9  &kp N0  &kp MINUS  &kp EQUAL
&none   &none   &none   &none   &none   &none   &none    &none  &none   &none   &none   &none   &none      &none
                        &trans  &trans  &trans  &none    &none  &trans  &trans  &trans
            >;
        };

        combo_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};

// vim: set et ts=4 sw=4:
